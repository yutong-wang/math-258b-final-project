# This is the main program that ties together the following parts:
# integral_points_count.py ---- The oracle that returns number of lattice points
# misc.py ---- miscellaneous functions
from misc import *

"""
#========================================================================
# Import polytope from file
f = open('input', 'r')
# get rid of the first line
l = [int(item) for item in (f.readline()).split(' ') if item.strip()]

# ambient dimension
d = l[1]-1


# converts a line of latte file into inequalities to be read for Sage's Polyhedron constructor
def makeIneq(line):
	return tuple(int(item) for item in line.split(' ') if item.strip())

# Construct the polyhedron from the input file
P = Polyhedron(ieqs = [makeIneq(line) for line in f])

f.close()

#========================================================================
"""









#========================================================================
# BEGIN miscellaneous functions

# REQUIRE a bbox, i.e. a list of 2-list that looks like [[l_1,...,l_d], [u_1,...,u_d]].
# RETURN a list of d-tuples
def bbox2list(bbox):
	import itertools
	lists = [range(bbox[0][i], bbox[1][i]+1) for i in range(d)]
	return list(itertools.product(*lists))

def flatten_bbox_list(bbox_list):
	return flatten_list(map(bbox2list,bbox_list))

# require a list of d-tuples
# returns a bbox, i.e. a list of 2-list that looks like [[l_1,...,l_d], [u_1,...,u_d]]. However, in this case, the bboxes are just the trivial bboxes, since this is the injection direction.
def list2bbox(l):
	return map(lambda x: [list(x), list(x)], l)



def getBoundingBoxSize(bbox):
	widths = map(lambda x: bbox[1][x] - bbox[0][x], range(d))
	mul_list = lambda l: reduce(lambda x, y: x*y, l,1)
	return mul_list( map(lambda x: x+1, widths) )


# RETURNS the i-th dimensional delta basis vector for i in {0,...,d-1}
def delta_vect(i, value):
	v = [0]*d
	v[i]=value
	return v
# END miscellaneous functions
#========================================================================

# The Oracle
from integral_points_count import integral_points_count
# print P_cdd
# print integral_points_count(P_cdd)

# This governs when bbox is getting too small. It is put here so that the split_polytope function sees!
stopping_bound = 0


# REQUIRES a Sage polytope object
# RETURNS a bbox if bbox option is set to True, else return a list
def binary_search_lpe(P, bbox=True, stop = 0):
	global stopping_bound
	stopping_bound = stop
	# Get the cdd file for the polytope and write it as a string
	P_cdd = P.cdd_Hrepresentation()
	bbox =  map(list, P.bounding_box())
	for i in range(d):
		bbox[1][i] = ceil(bbox[1][i])
		bbox[0][i] = floor(bbox[0][i])
	L = split_polytope(P_cdd, bbox, [])
	if bbox:
		return L
	else:
		return flatten_list(map(bbox2list,L))
# Returns 
# REQUIRES T=(P_cdd, bbox), a TUPLE PAIR of the cdd file and the bounding box
def split_polytope(P_cdd, bbox, L):
	# get the list of widths of the bounding box of the polytope

	# DO NOT REFACTOR THE FOLLOWING, AS TEMPTING AS IT MAY BE!
	widths = map(lambda x: bbox[1][x] - bbox[0][x], range(d))
	mul_list = lambda l: reduce(lambda x, y: x*y, l,1)
	bbox_size = mul_list( map(lambda x: x+1, widths) )

	#print "size of bbox: " + str(bbox_size)
	if bbox_size < stopping_bound:
		return list2bbox([x for x in bbox2list(bbox) if P.contains(x)])
	
	start = time.time()
	print P_cdd
	count = integral_points_count(P_cdd)
	end = time.time()

	"""
	print "LattE",
	print (end - start),
	print " bbox_size ",
	print bbox_size
	"""

	if count == 0:
		#print "empty..."
		return []
	elif bbox_size == count:
		#print "full..."
		return [bbox]
		

	# get the index of the thickest width
	max_index =  widths.index(max(widths))


	K = (bbox[1][max_index] + bbox[0][max_index])/2
	left_bound = floor(K)
	right_bound=floor(K)+1
	left_constraint = [0]*d
	left_constraint[max_index] = -1
	left_constraint.insert(0,left_bound)

	right_constraint = [0]*d
	right_constraint[max_index] = 1
	right_constraint.insert(0,-right_bound)
	
	# the "left" cut
	P_cdd_left = addConstraint(P_cdd, left_constraint)
	# the "right" cut
	P_cdd_right = addConstraint(P_cdd, right_constraint)

	# the "left" bounding box
	bbox_left = deepcopy(bbox)
	bbox_left[1][max_index] = left_bound

	# the "right" bounding box
	bbox_right = deepcopy(bbox)
	bbox_right[0][max_index] = right_bound
	return split_polytope(P_cdd_left, bbox_left, L) + split_polytope(P_cdd_right, bbox_right, L)



import time
d = 4
n = 10
k = 10
print "naive, stopping time = 26"
def run_test(N=1):
	print "Fibonnaci knapsack in dimension 5, b = 10 to 40"
	for n_th_run in range(N):
		global P
		global d
		"""
		#========================================================================
		# Fibonnaci knapsack in dimension 5 (see the paper by Assard et al)
		b = 20
		f = fib(d)
		f.insert(0,b+n_th_run*5)
		l = [tuple(f)]
		for i in range(d):
			l.append(tuple([0]+delta_vect(i,1)))
		P = Polyhedron(ieqs = l)
		#========================================================================

		"""

		"""
		#========================================================================
		# Random polytope C^d_k (see the paper by Assard et al)

		# returns a random integer point as a tuple in [0,k]^d
		def random_point(d,k):
			return tuple([floor(random()*k) for i in range(d)])

		# returns a list of n random integer points in [0,k]^d
		def random_point_set(n, d, k):
			return [random_point(d,k) for i in range(n)]
		global P
		P = Polyhedron(vertices = random_point_set(n,d,k))
		#========================================================================
		"""


		#========================================================================
		# Import polytope from file
		f = open('input', 'r')
		# get rid of the first line
		l = [int(item) for item in (f.readline()).split(' ') if item.strip()]

		# ambient dimension
		d = l[1]-1


		# converts a line of latte file into inequalities to be read for Sage's Polyhedron constructor
		def makeIneq(line):
			return tuple(int(item) for item in line.split(' ') if item.strip())

		# Construct the polyhedron from the input file
		P = Polyhedron(ieqs = [makeIneq(line) for line in f])

		f.close()

		#========================================================================



		#========================================================================
		# OUTPUTS

		"""
		# NO STOPPING TIME
		start = time.time()
		myL = binary_search_lpe(P, bbox=True)
		end = time.time()
		print (end - start),
		"""

		"""
		print b+n_th_run*5,
		print ",",
		"""

		# Naive 
		start = time.time()
		myL2 = P.integral_points()
		end = time.time()
		print myL2
		print (end - start),
		print ",",
		

		
		start = time.time()
		# myL1 = binary_search_lpe(P, bbox=True, stop=26)
		end = time.time()
		print (end - start),
		print ",",

		start = time.time()
		myL1 = binary_search_lpe(P, bbox=True, stop=101)
		end = time.time()
		print (end - start),
		print ",",
		print len(myL2)
		
		"""
		L1set = set(flatten_bbox_list(myL1))

		print "L1==========================================================================="
		print L1set
		print "L2==========================================================================="
		print L2set
		"""
	return None

run_test(1)



# print myL
# print len(myL)
# myLL =map(getBoundingBoxSize, myL) 
# print myLL
# print sum(myLL)/len(myLL)


